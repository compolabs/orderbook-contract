{
  "programType": "contract",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "()",
      "concreteTypeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
    },
    {
      "type": "(enum std::option::Option<enum std::identity::Identity>, u32)",
      "concreteTypeId": "7d13ddc56e7d2e69ab8239cf4b50d65f186f9a4a10a5a88eccd85b954ef09539",
      "metadataTypeId": 0
    },
    {
      "type": "(struct std::asset_id::AssetId, struct std::asset_id::AssetId)",
      "concreteTypeId": "d3ddf84f691d572b4313a7be3ae1d8b67fe9061c281ff6ae955e4c4441524f92",
      "metadataTypeId": 1
    },
    {
      "type": "(struct std::asset_id::AssetId, struct std::asset_id::AssetId, enum std::option::Option<struct std::contract_id::ContractId>)",
      "concreteTypeId": "ebac2eda4e76df30d6c6d33c546e9423167d2e38b538752e7ae5b31e6fc772df",
      "metadataTypeId": 2
    },
    {
      "type": "enum errors::MarketRegistryError",
      "concreteTypeId": "b264f9929edaded198c8f74b64111f328a2b6d8aed859ae00d025e0f17a2a0f8",
      "metadataTypeId": 4
    },
    {
      "type": "enum standards::src5::AccessError",
      "concreteTypeId": "3f702ea3351c9c1ece2b84048006c8034a24cbc2bad2e740d0412b4172951d3d",
      "metadataTypeId": 5
    },
    {
      "type": "enum standards::src5::State",
      "concreteTypeId": "192bc7098e2fe60635a9918afb563e4e5419d386da2bdbf0d716b4bc8549802c",
      "metadataTypeId": 6
    },
    {
      "type": "enum std::identity::Identity",
      "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
      "metadataTypeId": 7
    },
    {
      "type": "enum sway_libs::ownership::errors::InitializationError",
      "concreteTypeId": "1dfe7feadc1d9667a4351761230f948744068a090fe91b1bc6763a90ed5d3893",
      "metadataTypeId": 9
    },
    {
      "type": "struct events::MarketRegisterEvent",
      "concreteTypeId": "e559511bc70821c6e5333f8fe558060c41a83e157902640537145a83fe39911c",
      "metadataTypeId": 12
    },
    {
      "type": "struct events::MarketUnregisterEvent",
      "concreteTypeId": "78914643255fa4cad1546556baf0eb607cc71b603273e23c79caef436311a897",
      "metadataTypeId": 13
    },
    {
      "type": "struct std::contract_id::ContractId",
      "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
      "metadataTypeId": 16
    },
    {
      "type": "struct std::vec::Vec<(struct std::asset_id::AssetId, struct std::asset_id::AssetId)>",
      "concreteTypeId": "6447a267e9d2fb14747f1d0aac4c6698545574e97ab28e075201fd7fa1f0400e",
      "metadataTypeId": 18,
      "typeArguments": [
        "d3ddf84f691d572b4313a7be3ae1d8b67fe9061c281ff6ae955e4c4441524f92"
      ]
    },
    {
      "type": "struct std::vec::Vec<(struct std::asset_id::AssetId, struct std::asset_id::AssetId, enum std::option::Option<struct std::contract_id::ContractId>)>",
      "concreteTypeId": "1188c4d215c8979c27750c27dbb0e8ab6b1a113d969fb16256fee601c9dc8f73",
      "metadataTypeId": 18,
      "typeArguments": [
        "ebac2eda4e76df30d6c6d33c546e9423167d2e38b538752e7ae5b31e6fc772df"
      ]
    },
    {
      "type": "struct sway_libs::ownership::events::OwnershipSet",
      "concreteTypeId": "e1ef35033ea9d2956f17c3292dea4a46ce7d61fdf37bbebe03b7b965073f43b5",
      "metadataTypeId": 19
    },
    {
      "type": "struct sway_libs::ownership::events::OwnershipTransferred",
      "concreteTypeId": "b3fffbcb3158d7c010c31b194b60fb7857adb4ad61bdcf4b8b42958951d9f308",
      "metadataTypeId": 20
    },
    {
      "type": "u32",
      "concreteTypeId": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc"
    }
  ],
  "metadataTypes": [
    {
      "type": "(_, _)",
      "metadataTypeId": 0,
      "components": [
        {
          "name": "__tuple_element",
          "typeId": 8,
          "typeArguments": [
            {
              "name": "",
              "typeId": 7
            }
          ]
        },
        {
          "name": "__tuple_element",
          "typeId": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc"
        }
      ]
    },
    {
      "type": "(_, _)",
      "metadataTypeId": 1,
      "components": [
        {
          "name": "__tuple_element",
          "typeId": 15
        },
        {
          "name": "__tuple_element",
          "typeId": 15
        }
      ]
    },
    {
      "type": "(_, _, _)",
      "metadataTypeId": 2,
      "components": [
        {
          "name": "__tuple_element",
          "typeId": 15
        },
        {
          "name": "__tuple_element",
          "typeId": 15
        },
        {
          "name": "__tuple_element",
          "typeId": 8,
          "typeArguments": [
            {
              "name": "",
              "typeId": 16
            }
          ]
        }
      ]
    },
    {
      "type": "b256",
      "metadataTypeId": 3
    },
    {
      "type": "enum errors::MarketRegistryError",
      "metadataTypeId": 4,
      "components": [
        {
          "name": "MarketAlreadyRegistered",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "MarketNotRegistered",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        }
      ]
    },
    {
      "type": "enum standards::src5::AccessError",
      "metadataTypeId": 5,
      "components": [
        {
          "name": "NotOwner",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        }
      ]
    },
    {
      "type": "enum standards::src5::State",
      "metadataTypeId": 6,
      "components": [
        {
          "name": "Uninitialized",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "Initialized",
          "typeId": 7
        },
        {
          "name": "Revoked",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        }
      ]
    },
    {
      "type": "enum std::identity::Identity",
      "metadataTypeId": 7,
      "components": [
        {
          "name": "Address",
          "typeId": 14
        },
        {
          "name": "ContractId",
          "typeId": 16
        }
      ]
    },
    {
      "type": "enum std::option::Option",
      "metadataTypeId": 8,
      "components": [
        {
          "name": "None",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "Some",
          "typeId": 10
        }
      ],
      "typeParameters": [
        10
      ]
    },
    {
      "type": "enum sway_libs::ownership::errors::InitializationError",
      "metadataTypeId": 9,
      "components": [
        {
          "name": "CannotReinitialized",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        }
      ]
    },
    {
      "type": "generic T",
      "metadataTypeId": 10
    },
    {
      "type": "raw untyped ptr",
      "metadataTypeId": 11
    },
    {
      "type": "struct events::MarketRegisterEvent",
      "metadataTypeId": 12,
      "components": [
        {
          "name": "base",
          "typeId": 15
        },
        {
          "name": "quote",
          "typeId": 15
        },
        {
          "name": "market",
          "typeId": 16
        }
      ]
    },
    {
      "type": "struct events::MarketUnregisterEvent",
      "metadataTypeId": 13,
      "components": [
        {
          "name": "base",
          "typeId": 15
        },
        {
          "name": "quote",
          "typeId": 15
        },
        {
          "name": "market",
          "typeId": 16
        }
      ]
    },
    {
      "type": "struct std::address::Address",
      "metadataTypeId": 14,
      "components": [
        {
          "name": "bits",
          "typeId": 3
        }
      ]
    },
    {
      "type": "struct std::asset_id::AssetId",
      "metadataTypeId": 15,
      "components": [
        {
          "name": "bits",
          "typeId": 3
        }
      ]
    },
    {
      "type": "struct std::contract_id::ContractId",
      "metadataTypeId": 16,
      "components": [
        {
          "name": "bits",
          "typeId": 3
        }
      ]
    },
    {
      "type": "struct std::vec::RawVec",
      "metadataTypeId": 17,
      "components": [
        {
          "name": "ptr",
          "typeId": 11
        },
        {
          "name": "cap",
          "typeId": 21
        }
      ],
      "typeParameters": [
        10
      ]
    },
    {
      "type": "struct std::vec::Vec",
      "metadataTypeId": 18,
      "components": [
        {
          "name": "buf",
          "typeId": 17,
          "typeArguments": [
            {
              "name": "",
              "typeId": 10
            }
          ]
        },
        {
          "name": "len",
          "typeId": 21
        }
      ],
      "typeParameters": [
        10
      ]
    },
    {
      "type": "struct sway_libs::ownership::events::OwnershipSet",
      "metadataTypeId": 19,
      "components": [
        {
          "name": "new_owner",
          "typeId": 7
        }
      ]
    },
    {
      "type": "struct sway_libs::ownership::events::OwnershipTransferred",
      "metadataTypeId": 20,
      "components": [
        {
          "name": "new_owner",
          "typeId": 7
        },
        {
          "name": "previous_owner",
          "typeId": 7
        }
      ]
    },
    {
      "type": "u64",
      "metadataTypeId": 21
    }
  ],
  "functions": [
    {
      "inputs": [],
      "name": "owner",
      "output": "192bc7098e2fe60635a9918afb563e4e5419d386da2bdbf0d716b4bc8549802c",
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " Returns the owner."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Returns"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * [State] - Represents the state of ownership for this contract."
          ]
        },
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "new_owner",
          "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
        }
      ],
      "name": "initialize_ownership",
      "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "new_owner",
          "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
        }
      ],
      "name": "transfer_ownership",
      "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [],
      "name": "config",
      "output": "7d13ddc56e7d2e69ab8239cf4b50d65f186f9a4a10a5a88eccd85b954ef09539",
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " Retrieves the contract's configuration details, including the owner address and version number."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " ### Additional Information"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " This function returns the owner address and the version number of the contract."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " ### Returns"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * [(Option<Identity>, u32)] - A tuple containing the Otion of owner's Identity and the contract's version number as a 'u32'."
          ]
        },
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "market_assets",
          "concreteTypeId": "6447a267e9d2fb14747f1d0aac4c6698545574e97ab28e075201fd7fa1f0400e"
        }
      ],
      "name": "markets",
      "output": "1188c4d215c8979c27750c27dbb0e8ab6b1a113d969fb16256fee601c9dc8f73",
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " Retrieves the contract IDs of markets for a given list of base and quote asset pairs."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " ### Additional Information"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " This function takes a list of asset pairs and returns a vector containing each pair along with the corresponding market's contract ID if it is registered."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " If a market is not registered, 'None' is returned for the contract ID."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " ### Arguments"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `market_assets`: [Vec<(AssetId, AssetId)>] - A vector of tuples, where each tuple contains a base 'AssetId' and a quote 'AssetId'."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " ### Returns"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * [Vec<(AssetId, AssetId, Option<ContractId>)>] - A vector of tuples, where each tuple contains the base 'AssetId', the quote 'AssetId', and an 'Option<ContractId>' representing the market's contract ID."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "         The 'Option<ContractId>' is 'None' if the market is not registered."
          ]
        },
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "market",
          "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
        }
      ],
      "name": "register_market",
      "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " Registers a new market with the given contract ID."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " ### Additional Information"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " This function allows the contract owner to register a new market. It retrieves the base and quote assets associated with the market,"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " generates a unique market ID, and checks if the market is already registered. If the market is not registered, it is stored in the"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " contract's storage and a 'MarketRegisterEvent' is logged. The function enforces that only the contract owner can call it."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " ### Arguments"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `market`: [ContractId] - The 'ContractId' of the market to be registered."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " ### Reverts"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When called by non-owner."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When a token pair market already registered"
          ]
        },
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "market",
          "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
        }
      ],
      "name": "unregister_market",
      "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " Unregisters an existing market identified by the given contract ID."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " ### Additional Information"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " This function allows the contract owner to unregister a market. It retrieves the base and quote assets associated with the market,"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " generates the market ID, and checks if the market is currently registered. If the market is registered, it is removed from the"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " contract's storage and a 'MarketUnregisterEvent' is logged. The function enforces that only the contract owner can call it."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " ### Arguments"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `market`: [ContractId] - The 'ContractId' of the market to be unregistered."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " ### Reverts"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When called by non-owner."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When a market is not registered"
          ]
        },
        {
          "name": "storage",
          "arguments": [
            "write"
          ]
        }
      ]
    }
  ],
  "loggedTypes": [
    {
      "logId": "2161305517876418151",
      "concreteTypeId": "1dfe7feadc1d9667a4351761230f948744068a090fe91b1bc6763a90ed5d3893"
    },
    {
      "logId": "16280289466020123285",
      "concreteTypeId": "e1ef35033ea9d2956f17c3292dea4a46ce7d61fdf37bbebe03b7b965073f43b5"
    },
    {
      "logId": "4571204900286667806",
      "concreteTypeId": "3f702ea3351c9c1ece2b84048006c8034a24cbc2bad2e740d0412b4172951d3d"
    },
    {
      "logId": "12970362301975156672",
      "concreteTypeId": "b3fffbcb3158d7c010c31b194b60fb7857adb4ad61bdcf4b8b42958951d9f308"
    },
    {
      "logId": "12854673644547923665",
      "concreteTypeId": "b264f9929edaded198c8f74b64111f328a2b6d8aed859ae00d025e0f17a2a0f8"
    },
    {
      "logId": "16526329487357911494",
      "concreteTypeId": "e559511bc70821c6e5333f8fe558060c41a83e157902640537145a83fe39911c"
    },
    {
      "logId": "8687802410378175690",
      "concreteTypeId": "78914643255fa4cad1546556baf0eb607cc71b603273e23c79caef436311a897"
    }
  ],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "VERSION",
      "concreteTypeId": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc",
      "offset": 23528
    }
  ]
}