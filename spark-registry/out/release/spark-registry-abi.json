{
  "encoding": "1",
  "types": [
    {
      "typeId": 0,
      "type": "()",
      "components": [],
      "typeParameters": null
    },
    {
      "typeId": 1,
      "type": "(_, _)",
      "components": [
        {
          "name": "__tuple_element",
          "type": 10,
          "typeArguments": null
        },
        {
          "name": "__tuple_element",
          "type": 17,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 2,
      "type": "(_, _)",
      "components": [
        {
          "name": "__tuple_element",
          "type": 11,
          "typeArguments": null
        },
        {
          "name": "__tuple_element",
          "type": 11,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 3,
      "type": "(_, _, _)",
      "components": [
        {
          "name": "__tuple_element",
          "type": 11,
          "typeArguments": null
        },
        {
          "name": "__tuple_element",
          "type": 11,
          "typeArguments": null
        },
        {
          "name": "__tuple_element",
          "type": 7,
          "typeArguments": [
            {
              "name": "",
              "type": 12,
              "typeArguments": null
            }
          ]
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 4,
      "type": "b256",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 5,
      "type": "enum AuthError",
      "components": [
        {
          "name": "Unauthorized",
          "type": 0,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 6,
      "type": "enum MarketRegistryError",
      "components": [
        {
          "name": "MarketAlreadyRegistered",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "MarketNotRegistered",
          "type": 0,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 7,
      "type": "enum Option",
      "components": [
        {
          "name": "None",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "Some",
          "type": 8,
          "typeArguments": null
        }
      ],
      "typeParameters": [
        8
      ]
    },
    {
      "typeId": 8,
      "type": "generic T",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 9,
      "type": "raw untyped ptr",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 10,
      "type": "struct Address",
      "components": [
        {
          "name": "bits",
          "type": 4,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 11,
      "type": "struct AssetId",
      "components": [
        {
          "name": "bits",
          "type": 4,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 12,
      "type": "struct ContractId",
      "components": [
        {
          "name": "bits",
          "type": 4,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 13,
      "type": "struct MarketRegisterEvent",
      "components": [
        {
          "name": "base",
          "type": 11,
          "typeArguments": null
        },
        {
          "name": "quote",
          "type": 11,
          "typeArguments": null
        },
        {
          "name": "market",
          "type": 12,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 14,
      "type": "struct MarketUnregisterEvent",
      "components": [
        {
          "name": "base",
          "type": 11,
          "typeArguments": null
        },
        {
          "name": "quote",
          "type": 11,
          "typeArguments": null
        },
        {
          "name": "market",
          "type": 12,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 15,
      "type": "struct RawVec",
      "components": [
        {
          "name": "ptr",
          "type": 9,
          "typeArguments": null
        },
        {
          "name": "cap",
          "type": 18,
          "typeArguments": null
        }
      ],
      "typeParameters": [
        8
      ]
    },
    {
      "typeId": 16,
      "type": "struct Vec",
      "components": [
        {
          "name": "buf",
          "type": 15,
          "typeArguments": [
            {
              "name": "",
              "type": 8,
              "typeArguments": null
            }
          ]
        },
        {
          "name": "len",
          "type": 18,
          "typeArguments": null
        }
      ],
      "typeParameters": [
        8
      ]
    },
    {
      "typeId": 17,
      "type": "u32",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 18,
      "type": "u64",
      "components": null,
      "typeParameters": null
    }
  ],
  "functions": [
    {
      "inputs": [],
      "name": "config",
      "output": {
        "name": "",
        "type": 1,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " @notice Retrieves the contract's configuration details, including the owner address and version number."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " @dev This function returns the owner address and the version number of the contract."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " @return A tuple containing the owner's 'Address' and the contract's version number as a 'u32'."
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "market_assets",
          "type": 16,
          "typeArguments": [
            {
              "name": "",
              "type": 2,
              "typeArguments": null
            }
          ]
        }
      ],
      "name": "markets",
      "output": {
        "name": "",
        "type": 16,
        "typeArguments": [
          {
            "name": "",
            "type": 3,
            "typeArguments": null
          }
        ]
      },
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " @notice Retrieves the contract IDs of markets for a given list of base and quote asset pairs."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " @dev This function takes a list of asset pairs and returns a vector containing each pair along with the corresponding market's contract ID if it is registered."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "      If a market is not registered, 'None' is returned for the contract ID."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " @param market_assets A vector of tuples, where each tuple contains a base 'AssetId' and a quote 'AssetId'."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " @return A vector of tuples, where each tuple contains the base 'AssetId', the quote 'AssetId', and an 'Option<ContractId>' representing the market's contract ID."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "         The 'Option<ContractId>' is 'None' if the market is not registered."
          ]
        },
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "market",
          "type": 12,
          "typeArguments": null
        }
      ],
      "name": "register_market",
      "output": {
        "name": "",
        "type": 0,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " @notice Registers a new market with the given contract ID."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " @dev This function allows the contract owner to register a new market. It retrieves the base and quote assets associated with the market,"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "      generates a unique market ID, and checks if the market is already registered. If the market is not registered, it is stored in the"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "      contract's storage and a 'MarketRegisterEvent' is logged. The function enforces that only the contract owner can call it."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " @param market The 'ContractId' of the market to be registered."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " @return None - The function does not return a value."
          ]
        },
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "market",
          "type": 12,
          "typeArguments": null
        }
      ],
      "name": "unregister_market",
      "output": {
        "name": "",
        "type": 0,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " @notice Unregisters an existing market identified by the given contract ID."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " @dev This function allows the contract owner to unregister a market. It retrieves the base and quote assets associated with the market,"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "      generates the market ID, and checks if the market is currently registered. If the market is registered, it is removed from the"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "      contract's storage and a 'MarketUnregisterEvent' is logged. The function enforces that only the contract owner can call it."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " @param market The 'ContractId' of the market to be unregistered."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " @return None - The function does not return a value."
          ]
        },
        {
          "name": "storage",
          "arguments": [
            "write"
          ]
        }
      ]
    }
  ],
  "loggedTypes": [
    {
      "logId": "487470194140633944",
      "loggedType": {
        "name": "",
        "type": 5,
        "typeArguments": []
      }
    },
    {
      "logId": "12854673644547923665",
      "loggedType": {
        "name": "",
        "type": 6,
        "typeArguments": []
      }
    },
    {
      "logId": "16526329487357911494",
      "loggedType": {
        "name": "",
        "type": 13,
        "typeArguments": []
      }
    },
    {
      "logId": "8687802410378175690",
      "loggedType": {
        "name": "",
        "type": 14,
        "typeArguments": []
      }
    }
  ],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "OWNER",
      "configurableType": {
        "name": "",
        "type": 10,
        "typeArguments": []
      },
      "offset": 16344
    },
    {
      "name": "VERSION",
      "configurableType": {
        "name": "",
        "type": 17,
        "typeArguments": null
      },
      "offset": 16376
    }
  ]
}